---

- name: get latest release
  delegate_to: localhost
  become: false
  run_once: true
  when:
    - glauth_version == "latest"
  block:
    - name: get latest release
      delegate_to: localhost
      become: false
      run_once: true
      bodsch.scm.github_latest:
        project: glauth
        repository: glauth
        user: "{{ lookup('env', 'GH_USER') | default(omit) }}"
        password: "{{ lookup('env', 'GH_TOKEN') | default(omit) }}"
      register: _latest_release

    - name: re-define glauth_version
      ansible.builtin.set_fact:
        glauth_version: "{{ _latest_release.latest_release }}"

- name: define download information
  ansible.builtin.set_fact:
    glauth_release: "{{ glauth_defaults_release | combine(glauth_release, recursive=True) }}"

- name: define delegate instance for download handling
  ansible.builtin.set_fact:
    glauth_delegate_to: "{{ ansible_host }}"
    glauth_local_tmp_directory: "{{
        lookup('env', 'CUSTOM_LOCAL_TMP_DIRECTORY') |
        default('/var/cache/ansible/glauth', true) }}/{{ glauth_version }}"
  when:
    - glauth_direct_download

- name: get download link for release {{ glauth_version }}
  delegate_to: localhost
  become: false
  run_once: true
  bodsch.scm.github_releases:
    project: glauth
    repository: glauth
    version: "{{ glauth_version }}"
    architecture: "{{ ansible_architecture }}"
    system: "{{ ansible_facts.system }}"
    user: "{{ lookup('env', 'GH_USER') | default(omit) }}"
    password: "{{ lookup('env', 'GH_TOKEN') | default(omit) }}"
  register: _glauth_releases
  until: _glauth_releases.status == 200
  retries: 2

- name: define download url
  delegate_to: localhost
  become: false
  run_once: true
  ansible.builtin.set_fact:
    glauth_download_url: "{{ _glauth_releases.download_url }}"

- name: define download artefact
  delegate_to: localhost
  become: false
  run_once: true
  ansible.builtin.set_fact:
    glauth_download_artefact: "{{ glauth_local_tmp_directory }}/{{ glauth_download_url | basename }}"

- name: create download directory
  become: false
  delegate_to: "{{ glauth_delegate_to }}"
  run_once: "{{ 'false' if glauth_direct_download else 'true' }}"
  ansible.builtin.file:
    path: "{{ glauth_local_tmp_directory }}"
    state: directory
    mode: 0750

- name: detect the downloaded glauth archive
  become: false
  delegate_to: "{{ glauth_delegate_to }}"
  run_once: "{{ 'false' if glauth_direct_download else 'true' }}"
  ansible.builtin.stat:
    path: "{{ glauth_download_artefact }}"
  register: stat_glauth_archive

- name: download
  when:
    - stat_glauth_archive.stat is defined
    - not stat_glauth_archive.stat.exists | default('false')
  block:
    - name: download glauth binary archive
      become: false
      delegate_to: "{{ glauth_delegate_to }}"
      run_once: "{{ 'false' if glauth_direct_download else 'true' }}"
      ansible.builtin.get_url:
        url: "{{ glauth_download_url }}"
        dest: "{{ glauth_download_artefact }}"
        mode: 0640
      register: _download_archive
      until: _download_archive is succeeded
      retries: 5
      delay: 2
      check_mode: false

  rescue:
    - name: delete download directory
      become: false
      delegate_to: "{{ glauth_delegate_to }}"
      run_once: "{{ 'false' if glauth_direct_download else 'true' }}"
      ansible.builtin.file:
        path: "{{ glauth_local_tmp_directory }}"
        state: absent

    - name: exit with fail
      ansible.builtin.fail:
        msg: A serious error occurred when downloading the archive.

- name: detect extracted binary
  become: false
  delegate_to: "{{ glauth_delegate_to }}"
  run_once: "{{ 'false' if glauth_direct_download else 'true' }}"
  ansible.builtin.stat:
    path: "{{ glauth_local_tmp_directory }}/{{ glauth_release.binary }}"
  register: stat_glauth_binary

- name: verify downloaded artefact '{{ glauth_download_url | basename }}'
  become: false
  delegate_to: "{{ glauth_delegate_to }}"
  run_once: "{{ 'false' if glauth_direct_download else 'true' }}"
  ansible.builtin.stat:
    path: "{{ glauth_download_artefact }}"
  register: stat_glauth_downloaded_artefact

- name: extract glauth archive
  become: false
  delegate_to: "{{ glauth_delegate_to }}"
  run_once: "{{ 'false' if glauth_direct_download else 'true' }}"
  ansible.builtin.unarchive:
    src: "{{ glauth_download_artefact }}"
    dest: "{{ glauth_local_tmp_directory }}/"
    copy: false
    #extra_opts:
    #  - --strip-components=1
  when:
    - stat_glauth_downloaded_artefact.stat.mimetype == "application/zip"
    - stat_glauth_binary.stat is defined
    - not stat_glauth_binary.stat.exists | default('false')

- name: plugins
  when:
    - glauth_version is version_compare('2.2.0', '>=')
  block:
    - name: download plugins
      ansible.builtin.include_tasks: plugins.yml
      loop: "{{ glauth_plugins }}"
      loop_control:
        index_var: index
        loop_var: plugin
        label: "plugin: {{ plugin.name }}"
      when:
        - plugin is defined

...
