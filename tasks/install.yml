---

- name: user and group handling
  when:
    - glauth_system_user != "root"
  block:
    - name: create glauth group
      become: true
      ansible.builtin.group:
        name: "{{ glauth_system_group }}"
        state: present
        system: true

    - name: create glauth user
      become: true
      ansible.builtin.user:
        name: "{{ glauth_system_user }}"
        groups: "{{ glauth_system_group }}"
        append: true
        shell: /usr/sbin/nologin
        system: true
        createhome: false
        home: /nonexistent

- name: create install directory
  become: true
  ansible.builtin.file:
    path: "{{ glauth_install_path }}"
    state: directory
    owner: "{{ glauth_system_user }}"
    group: "{{ glauth_system_group }}"
    mode: 0755

- name: create glauth lib directory
  become: true
  ansible.builtin.file:
    path: "{{ glauth_data_dir }}"
    state: directory
    group: "{{ glauth_system_group }}"
    mode: 0755

- name: detect binary file for glauth on '{{ glauth_delegate_to }}'
  become: false
  delegate_to: "{{ glauth_delegate_to }}"
  run_once: "{{ 'false' if glauth_direct_download else 'true' }}"
  ansible.builtin.find:
    paths: "{{ glauth_local_tmp_directory }}"
    file_type: file
    patterns:
      - "glauth"
      - "glauth-linux-amd64"
    recurse: true
  register: _detected_binary

- name: define glauth binary
  ansible.builtin.set_fact:
    stat_glauth_binary: "{{ _detected_binary.files[0].path }}"
  when:
    - _detected_binary.files is defined
    - _detected_binary.files | count > 0

- name: fail when extracted binary are missing
  ansible.builtin.fail:
    msg: "missing extracted binary on ansible controller"
  when:
    - not stat_glauth_binary is defined
    - not stat_glauth_binary | string | length > 0

- name: detect activated glauth binary
  ansible.builtin.stat:
    path: "/usr/bin/{{ glauth_release.binary }}"
  register: stat_glauth_activated

- name: install and activate glauth
  when:
    - (stat_glauth_binary is defined and stat_glauth_binary | string | length > 0) or
      not stat_glauth_activated.stat | bodsch.core.linked_version(glauth_install_path, glauth_version)
  block:
    - name: propagate files
      block:
        - name: propagate glauth binaries
          become: true
          ansible.builtin.copy:
            src: "{{ stat_glauth_binary }}"
            dest: "{{ glauth_install_path }}/glauth"
            mode: 0755
            owner: "{{ glauth_system_user }}"
            group: "{{ glauth_system_group }}"
            remote_src: "{{ 'true' if glauth_direct_download else 'false' }}"

        - name: make files executable
          become: true
          ansible.builtin.file:
            path: "{{ glauth_install_path }}/glauth"
            mode: 0755
            owner: "{{ glauth_system_user }}"
            group: "{{ glauth_system_group }}"

        - name: create link to binary
          ansible.builtin.file:
            src: "{{ glauth_install_path }}/{{ glauth_release.binary }}"
            dest: "/usr/bin/{{ glauth_release.binary }}"
            state: link
            force: true
            follow: false
          notify:
            - restart glauth

      rescue:
        - name: delete install directory
          ansible.builtin.file:
            path: "{{ glauth_install_path }}"
            state: absent

        - name: exit with fail
          ansible.builtin.fail:
            msg: A serious error occurred during the installation of the binary.

- name: TLS support
  when:
    - glauth_config.ldaps | support_tls
  block:
    - name: copy certificates
      become: true
      glauth_tls_certificates:
        source:
          ssl_cert: "{{ glauth_tls_certificate.source_files.cert | default(omit) }}"
          ssl_key: "{{ glauth_tls_certificate.source_files.key | default(omit) }}"
        destination: "{{ glauth_config.ldaps | tls_directory }}"
        owner: "{{ glauth_system_user }}"
        group: "{{ glauth_system_group }}"

# plugins
- name: detect glauth plugins
  delegate_to: "{{ glauth_delegate_to }}"
  become: false
  run_once: "{{ 'false' if glauth_direct_download else 'true' }}"
  ansible.builtin.find:
    paths: "{{ glauth_local_tmp_directory }}"
    file_type: file
    patterns:
      - "*.so"
    recurse: true
  register: _detected_plugins

- name: install glauth plugins
  when:
    - _detected_plugins.files is defined
    - _detected_plugins.files | count > 0
  block:

    - name: define plugin list
      ansible.builtin.set_fact:
        glauth_plugins: "{{ _detected_plugins.files | glauth_plugins }}"

    - name: create plugins directory for installed version
      become: true
      ansible.builtin.file:
        state: directory
        path: "{{ glauth_install_path }}/plugins"
        mode: 0755
        owner: "{{ glauth_system_user }}"
        group: "{{ glauth_system_group }}"

    - name: copy plugins in place
      become: true
      ansible.builtin.copy:
        src: "{{ glauth_local_tmp_directory }}/{{ item }}"
        dest: "{{ glauth_install_path }}/plugins/"
        mode: 0644
        owner: "{{ glauth_system_user }}"
        group: "{{ glauth_system_group }}"
        remote_src: "{{ 'true' if glauth_direct_download else 'false' }}"
      loop: "{{ glauth_plugins }}"
      notify:
        - restart glauth

    - name: create link to plugins
      become: true
      ansible.builtin.file:
        state: link
        src: "{{ glauth_install_path }}/plugins"
        dest: "{{ glauth_data_dir }}/plugins"
        force: true
        follow: false

- name: create custom fact file
  bodsch.core.facts:
    name: glauth
    facts:
      version: "{{ glauth_version }}"

- name: python support
  when:
    - glauth_python_packages is defined
    - glauth_python_packages | count > 0
  block:
    - name: create pip requirements file
      bodsch.core.pip_requirements:
        name: glauth
        requirements: "{{ glauth_python_packages }}"
      register: pip_requirements

    - name: fail if pip not installed
      ansible.builtin.fail:
        msg: python pip is not installed
      when:
        - not pip_requirements.pip.present

    - name: install glauth python packages  # noqa no-handler
      ansible.builtin.pip:
        state: present
        requirements: "{{ pip_requirements.requirements_file }}"
        extra_args: "{{ glauth_python_extra_args | default([]) | bodsch.core.python_extra_args(python_version=ansible_python.version) | default(omit) }}"
      register: pip_install
      ignore_errors: true
      no_log: true
      when:
        - pip_requirements.requirements_file is defined
        - pip_requirements.changed

    - name: first run is failed, try with build
      when:
        - pip_install is defined
        - pip_install.failed is defined
        - pip_install.failed
        - glauth_python_packages | default([]) | count > 0
      block:
        - name: install build essentials
          ansible.builtin.package:
            name: "{{ glauth_build_packages }}"
            state: present

        - name: ensure python bindings for glauth packages 2nd
          ansible.builtin.pip:
            state: present
            requirements: "{{ pip_requirements.requirements_file }}"
            extra_args: "{{ glauth_python_extra_args | default([]) | bodsch.core.python_extra_args(python_version=ansible_python.version) | default(omit) }}"

        - name: uninstall build essentials
          ansible.builtin.package:
            name: "{{ glauth_build_packages }}"
            state: absent

    - name: do facts module to get latest information
      ansible.builtin.setup:
  rescue:
    - name: remove python requirements file
      bodsch.core.pip_requirements:
        name: glauth
        requirements: "{{ glauth_python_packages }}"
        state: absent

    - name: exit with fail
      ansible.builtin.fail:
        msg: Sorry, but a serious error occurred when installing the required Python packages.

- name: systemd
  when:
    - ansible_service_mgr | lower == "systemd"
  block:
    - name: create systemd service unit
      become: true
      ansible.builtin.template:
        src: "init/systemd/glauth.service.j2"
        dest: "{{ systemd_lib_directory }}/glauth.service"
        owner: root
        group: root
        mode: 0644
      notify:
        - daemon-reload
        - restart glauth

    - name: create glauth run configuration
      become: true
      ansible.builtin.template:
        src: "glauth.j2"
        dest: "{{ glauth_defaults_directory }}/glauth"
        force: true
        owner: root
        group: "{{ glauth_system_group }}"
        mode: 0640
      notify:
        - validate glauth config
        - restart glauth

- name: openrc
  when:
    - ansible_service_mgr | lower == "openrc"
  block:
    - name: create openrc service configuration
      become: true
      ansible.builtin.template:
        src: "init/openrc/conf.d/glauth.j2"
        dest: "/etc/conf.d/glauth"
        owner: root
        group: root
        mode: 0644

    - name: create openrc init configuration
      become: true
      ansible.builtin.template:
        src: "init/openrc/init.d/glauth.j2"
        dest: "/etc/init.d/glauth"
        owner: root
        group: root
        mode: 0750

...
