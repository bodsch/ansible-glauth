---

- name: detect binary file for glauth
  become: false
  delegate_to: "{{ glauth_delegate_to }}"
  stat:
    path: "{{ glauth_local_tmp_directory }}/glauth"
  register: stat_file_binary

- block:
    - name: propagate glauth binaries
      copy:
        src: "{{ glauth_local_tmp_directory }}/glauth"
        dest: "{{ glauth_install_path }}/glauth"
        mode: 0755
        owner: "{{ glauth_system_user }}"
        group: "{{ glauth_system_group }}"
        remote_src: "{{ 'true' if glauth_direct_download else 'false' }}"

    - name: make files executable
      file:
        path: "{{ glauth_install_path }}/glauth"
        mode: 0755
        owner: "{{ glauth_system_user }}"
        group: "{{ glauth_system_group }}"

  when:
    - stat_file_binary.stat.exists

- name: propagate glauth plugins
  block:
    - name: create plugins directory for installed version
      file:
        state: directory
        path: "{{ glauth_install_path }}/plugins"
        mode: 0755
        owner: "{{ glauth_system_user }}"
        group: "{{ glauth_system_group }}"

    - name: copy plugins in place
      copy:
        src: "{{ glauth_local_tmp_directory }}/{{ item }}"
        dest: "{{ glauth_install_path }}/plugins/"
        mode: 0644
        owner: "{{ glauth_system_user }}"
        group: "{{ glauth_system_group }}"
        remote_src: "{{ 'true' if glauth_direct_download else 'false' }}"
      loop:
        - mysql.so
        - postgres.so
        - sqlite.so
      notify:
        - reload glauth

- name: create local facts
  template:
    src: ansible_facts.j2
    dest: /etc/ansible/facts.d/glauth.fact
    mode: 0755

- name: create glauth lib directory
  file:
    state: directory
    path: "{{ glauth_data_dir }}"
    mode: 0755

- name: create link to binary
  file:
    src: "{{ glauth_install_path }}/glauth"
    dest: "/usr/bin/glauth"
    state: link
    force: true
    follow: false
  notify:
    - restart glauth

- name: create link to plugins
  file:
    state: link
    src: "{{ glauth_install_path }}/plugins"
    dest: "{{ glauth_data_dir }}/plugins"
    force: true
    follow: false

- name: systemd
  block:
    - name: create systemd service unit
      template:
        src: "init/systemd/glauth.service.j2"
        dest: "{{ systemd_lib_directory }}/glauth.service"
        owner: root
        group: root
        mode: 0644
      notify:
        - daemon-reload
        - restart glauth

    - name: create glauth run configuration
      template:
        src: "glauth.j2"
        dest: "{{ glauth_defaults_directory }}/glauth"
        force: true
        owner: root
        group: "{{ glauth_system_group }}"
        mode: 0640
      notify:
        - validate config
        - reload glauth
  when:
    - ansible_service_mgr | lower == "systemd"

- name: openrc
  block:
    - name: create openrc service configuration
      template:
        src: "init/openrc/conf.d/glauth.j2"
        dest: "/etc/conf.d/glauth"
        owner: root
        group: root
        mode: 0644

    - name: create openrc init configuration
      template:
        src: "init/openrc/init.d/glauth.j2"
        dest: "/etc/init.d/glauth"
        owner: root
        group: root
        mode: 0750
  when:
    - ansible_service_mgr | lower == "openrc"


- name: python support
  block:
    - name: create requirements.txt
      template:
        src: requirements.txt.j2
        dest: /tmp/glauth-requirements.txt
        mode: 0660

    - name: ensure python bindings for glauth packages 1st
      pip:
        requirements: /tmp/glauth-requirements.txt
        state: present
        executable: pip{{ '3' if ansible_python.version.major | int == 3 else '' }}
      register: pip_install
      ignore_errors: true
      no_log: true

    - block:
        - name: install build essentials
          package:
            name: "{{ glauth_build_packages }}"
            state: present

        - name: ensure python bindings for glauth packages 2nd
          pip:
            requirements: /tmp/glauth-requirements.txt
            state: present
            executable: pip{{ '3' if ansible_python.version.major | int == 3 else '' }}

        - name: uninstall build essentials
          package:
            name: "{{ glauth_build_packages }}"
            state: absent
      when:
        - pip_install.failed
  when:
    - glauth_python_packages is defined
    - glauth_python_packages | length > 0

...
